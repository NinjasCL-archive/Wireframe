<?php

namespace Wireframe;

/**
 * Container for View Placeholders
 * 
 * @version 0.2.0
 * @author Teppo Koivula <teppo@wireframe-framework.com>
 * @license Mozilla Public License v2.0 https://mozilla.org/MPL/2.0/
 */
class ViewPlaceholders {

    /**
     * View instance
     *
     * @var View
     */
    protected $view;

    /**
     * The Page instance associated with current placeholders object
     *
     * @var ProcessWire\Page
     */
    protected $page;
    
    /**
     * Directory containing view files
     *
     * @var string
     */
    protected $views_path;

    /**
     * View file extension
     *
     * @var string
     */
    protected $ext;

    /**
     * Container for data
     *
     * @var array
     */
    protected $data = [];
    
    /**
     * Constructor method
     * 
     * @param ProcessWire\Page $page Current page.
     * @param string $views_path Path to the views directory.
     * @param string $ext Extension for view files.
     * @param View $view View object.
     *
     * @throws Exception if path to the views directory is missing or unreadable.
     * @throws Exception if invalid format is used for view file extension.
     */
    public function __construct(\ProcessWire\Page $page, string $views_path, string $ext, View $view) {

        // Set page
        $this->page = $page;

        // Set, validate, and format path to the views directory
        if (!is_dir($views_path)) {
            throw new \Exception(sprintf(
                'Missing or unreadable path to the views directory: "%"',
                $views_path
            ));
        }
        if (strrpos($views_path, '/') !== 0) {
            $views_path .= "/";
        }
        $this->views_path = $views_path;

        // Set, validate, and format view file extension
        $this->ext = $ext;
        if (basename($this->ext) !== $this->ext) {
            throw new \Exception(sprintf(
                'View file extension does not match expected format: "%s".',
                $this->ext
            ));
        }
        if (strpos($this->ext, '.') !== 0) {
            $this->ext = '.' . $this->ext;
        }

	// Set View
	$this->view = $view;
    }
    
    /**
     * Generic getter method
     *
     * Return content from a named view placeholder, or markup generated by
     * rendering the page using a view matching the placeholder name.
     * 
     * @param string $key Name of a view placeholder or view
     * @return mixed Content stored in a view placeholder, or rendered output of a view
     */
    public function __get(string $key) {
        $return = $this->data[$key] ?? null;
        if (is_null($return) && basename($key) === $key) {
            if (is_file($this->views_path . $this->view->template . '/' . $key . $this->ext)) {
                $page_layout = $this->page->layout();
                $page_view = $this->page->view();
                $this->page->_wireframe_context = 'placeholder';
                $return = $this->page->layout('')->view($key)->render();
                unset($this->page->_wireframe_context);
                if ($page_layout !== '') {
                    $this->page->layout($page_layout);
                }
                if ($page_view !== $key) {
                    $this->page->view($page_view);
                }
            }
        }
        return $return;
    }

    /**
     * Store values to the protected $data array
     * 
     * @param string $key Name of a view placeholder
     * @param mixed $value Value to store in a view placeholder
     * @return ViewPlaceholders Current instance
     */
    public function __set(string $key, $value): ViewPlaceholders {
        $this->data[$key] = $value;
        return $this;
    }
    
}
